

import numpy as np
print("Example for broadcasting: ")
v=np.array([1,2,3])
w=np.array([4,5])
print("v = ",v)
print("w=",w)
print("Outer product of above vectors: ")
print(np.reshape(v,(3,1))*w)
x=np.array([[1,2,3],[4,5,6]])
print("x = ",x)
print("Resultant matrix after adding the vector x to each row of matrix v: ")
print(x+v)
print("Example for broadcasting fails: ")
print("Adding the vector x to each column of matrix w will generate an error")
print("Solution: Reshape the matrix w then the result will be: ")
print(x+np.reshape(w,(2,1)))
     

Example for broadcasting: 
v =  [1 2 3]
w= [4 5]
Outer product of above vectors: 
[[ 4  5]
 [ 8 10]
 [12 15]]
x =  [[1 2 3]
 [4 5 6]]
Resultant matrix after adding the vector x to each row of matrix v: 
[[2 4 6]
 [5 7 9]]
Example for broadcasting fails: 
Adding the vector x to each column of matrix w will generate an error
Solution: Reshape the matrix w then the result will be: 
[[ 5  6  7]
 [ 9 10 11]]


import numpy as np

print("Array indexing: slicing")
a1 = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print("a1 =", a1)

b = a1[:2, 1:3]
print("Subarray consisting of the first two rows and columns 1 and 2:", b)

b = a1[1:2, :]
print("Subarray consists of the second row:", b)

print("Accessing columns:")
c = a1[:, 1:2]
print(c, c.shape)

print("Array integer indexing:")
a2 = np.array([[1, 2], [3, 4], [5, 6]])
print("a2 =", a2)

print("Example of array integer indexing:", a2[[0, 1, 2], [0, 1, 0]])
print(a2[[0, 0], [1, 1]])
print(np.array([a2[0, 1], a2[0, 1]]))

a3 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
print("a3 =", a3)

# Create an array of indices
b = np.array([0, 2, 0, 1])
print("b =", b)

print("Select one element from each row of a using the indices in b:")
print("a3 =", a3[np.arange(4), b])

a3[np.arange(4), b] += 10
print("a3 =", a3)

print("Boolean array indexing:")
a = np.array([[1, 2], [3, 4], [5, 6]])
print("a =", a)

bool_idx = (a > 2)
print("Elements greater than 2:", a[bool_idx])
     

Array indexing: slicing
a1 = [[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
Subarray consisting of the first two rows and columns 1 and 2: [[2 3]
 [6 7]]
Subarray consists of the second row: [[5 6 7 8]]
Accessing columns:
[[ 2]
 [ 6]
 [10]] (3, 1)
Array integer indexing:
a2 = [[1 2]
 [3 4]
 [5 6]]
Example of array integer indexing: [1 4 5]
[2 2]
[2 2]
a3 = [[ 1  2  3]
 [ 4  5  6]
 [ 7  8  9]
 [10 11 12]]
b = [0 2 0 1]
Select one element from each row of a using the indices in b:
a3 = [ 1  6  7 11]
a3 = [[11  2  3]
 [ 4  5 16]
 [17  8  9]
 [10 21 12]]
Boolean array indexing:
a = [[1 2]
 [3 4]
 [5 6]]
Elements greater than 2: [3 4 5 6]


import numpy as np

x = np.array([[1, 2], [3, 4]], dtype=np.float64)
y = np.array([[6, 9], [4, 4]], dtype=np.float64)

print("x =", x)
print("y =", y)
print("Element wise addition:", np.add(x, x))
print("Element wise subtraction:", np.subtract(x, y))
print("Element wise multiplication:", np.multiply(x, y))
print("Element wise square root of x:", np.sqrt(x))
print("Matrix multiplication:", np.dot(x, y))
print("Sum of all elements of matrix x:", np.sum(x))
print("Sum of elements in each column of matrix y:", np.sum(y, axis=0))
print("Sum of elements in each row of matrix y:", np.sum(y, axis=1))
print("Transpose of matrix x:", x.T)
     

x = [[1. 2.]
 [3. 4.]]
y = [[6. 9.]
 [4. 4.]]
Element wise addition: [[2. 4.]
 [6. 8.]]
Element wise subtraction: [[-5. -7.]
 [-1.  0.]]
Element wise multiplication: [[ 6. 18.]
 [12. 16.]]
Element wise square root of x: [[1.         1.41421356]
 [1.73205081 2.        ]]
Matrix multiplication: [[14. 17.]
 [34. 43.]]
Sum of all elements of matrix x: 10.0
Sum of elements in each column of matrix y: [10. 13.]
Sum of elements in each row of matrix y: [15.  8.]
Transpose of matrix x: [[1. 3.]
 [2. 4.]]


import numpy as np

v = np.array([1, 2, 3])
w = np.array([4, 5])
print("v =", v)
print("w =", w)
print("Outer product of the above vectors:")
print(np.reshape(v, (3, 1)) * w)
x = np.array([[1, 2, 3], [4, 5, 6]])
print("x =", x)
print("Resultant matrix after adding the vector x to each row of matrix v:")
print(x + v)
print("Adding the vector x to each column of matrix w will generate an error")
print("Solution: Reshape the matrix w; then the result will be:")
print(x + np.reshape(w, (2, 1)))
     

v = [1 2 3]
w = [4 5]
Outer product of the above vectors:
[[ 4  5]
 [ 8 10]
 [12 15]]
x = [[1 2 3]
 [4 5 6]]
Resultant matrix after adding the vector x to each row of matrix v:
[[2 4 6]
 [5 7 9]]
Adding the vector x to each column of matrix w will generate an error
Solution: Reshape the matrix w; then the result will be:
[[ 5  6  7]
 [ 9 10 11]]


from numpy import array
from scipy.linalg import svd

A = array([[1, 2], [3, 4], [5, 6]])
U, s, VT = svd(A)

print("A =", A)
print("Shape of array A:", A.shape)
print("")
print("U =", U)
print("Shape of matrix U:", U.shape)
print("")
print("Sigma (diagonal matrix), s =", s)
print("Shape of matrix sigma:", s.shape)
print("")
print("Transpose Matrix, VT =", VT)
print("Shape of matrix VT:", VT.shape)
     

A = [[1 2]
 [3 4]
 [5 6]]
Shape of array A: (3, 2)

U = [[-0.2298477   0.88346102  0.40824829]
 [-0.52474482  0.24078249 -0.81649658]
 [-0.81964194 -0.40189603  0.40824829]]
Shape of matrix U: (3, 3)

Sigma (diagonal matrix), s = [9.52551809 0.51430058]
Shape of matrix sigma: (2,)

Transpose Matrix, VT = [[-0.61962948 -0.78489445]
 [-0.78489445  0.61962948]]
Shape of matrix VT: (2, 2)


from numpy import array, diag, dot, zeros
from scipy.linalg import svd

A = array([[1, 2], [3, 4], [5, 6]])
print("A = ", A)
print(A.shape)

U, s, VT = svd(A)
print("U =", U)
print(U.shape)
print("s = ", s)
print(s.shape)
print("VT = ", VT)
print(VT.shape)

sigma = zeros((A.shape[0], A.shape[1]))
sigma[:A.shape[1], :A.shape[1]] = diag(s)
B = U.dot(sigma.dot(VT))
print("Reconstructed matrix: ", B)
     

A =  [[1 2]
 [3 4]
 [5 6]]
(3, 2)
U = [[-0.2298477   0.88346102  0.40824829]
 [-0.52474482  0.24078249 -0.81649658]
 [-0.81964194 -0.40189603  0.40824829]]
(3, 3)
s =  [9.52551809 0.51430058]
(2,)
VT =  [[-0.61962948 -0.78489445]
 [-0.78489445  0.61962948]]
(2, 2)
Reconstructed matrix:  [[1. 2.]
 [3. 4.]
 [5. 6.]]


from numpy import array, diag, zeros
from scipy.linalg import pinv
from numpy.linalg import svd

A = array([[1, 2], [3, 4], [5, 6]])
print("A=",A)

print("Pseudoinverse of matrix A calculated by function pinv is:")
print(pinv(A))
d = 1.0 / s
D = zeros(A.shape)
D[:A.shape[1], :A.shape[1]] = diag(d)
B = VT.T.dot(D.T).dot(U.T)

print("Pseudoinverse of matrix A calculated by using svd is:")
print(B)
     

A= [[1 2]
 [3 4]
 [5 6]]
Pseudoinverse of matrix A calculated by function pinv is:
[[-1.33333333 -0.33333333  0.66666667]
 [ 1.08333333  0.33333333 -0.41666667]]
Pseudoinverse of matrix A calculated by using svd is:
[[-1.33333333 -0.33333333  0.66666667]
 [ 1.08333333  0.33333333 -0.41666667]]


import numpy as np
a=np.array([1,2,3])
print("One dimensional array a=",a)
b=np.array([[1,2,3],[4,5,6]])
print("Two dimensional array b=",b)
print("Size of the array:",a.shape)
print("Element at indices 0,1,2:",a[0],a[1],a[2])
a[0]=5
print("Array after changing the element at index 0:",a)
a=np.zeros((2,2))
print("An array of all zeros:",a)
b=np.ones((1,2))
print("An array of all ones:",b)
c=np.full((2,2),7)
print("A constant array:",c)
d=np.eye(2)
print("A 2*2 identity matrix:",d)
e=np.random.random((2,2))
print("An array with random values:",e)
     

One dimensional array a= [1 2 3]
Two dimensional array b= [[1 2 3]
 [4 5 6]]
Size of the array: (3,)
Element at indices 0,1,2: 1 2 3
Array after changing the element at index 0: [5 2 3]
An array of all zeros: [[0. 0.]
 [0. 0.]]
An array of all ones: [[1. 1.]]
A constant array: [[7 7]
 [7 7]]
A 2*2 identity matrix: [[1. 0.]
 [0. 1.]]
An array with random values: [[0.41083552 0.56069188]
 [0.3048859  0.95400913]]


from os import truncate
from numpy import array
from scipy.linalg import svd
from sklearn.decomposition import TruncatedSVD
A = array([[1, 2,3,4,5,6,7,8,9,10], [11,12,13,14,15,16,17,18,19,20], [21,22,23,24,25,26,27,28,29,30]])

print("A =", A)
print(" ")
U, s, VT = svd(A)
sigma = zeros((A.shape[0], A.shape[1]))
sigma[:A.shape[0],:A.shape[0]] =diag(s)
sigma=sigma[:,:2]
VT=VT[:2,:]
T=U.dot(sigma)
T=A.dot(VT.T)
print("Transpose of original matrix using svd is")
print(T)
print(" ")
svd=TruncatedSVD(2)
svd.fit(A)
result=svd.transform(A)
print("transformed version:")
print(result)
     

A = [[ 1  2  3  4  5  6  7  8  9 10]
 [11 12 13 14 15 16 17 18 19 20]
 [21 22 23 24 25 26 27 28 29 30]]
 
Transpose of original matrix using svd is
[[-18.52157747   6.47697214]
 [-49.81310011   1.91182038]
 [-81.10462276  -2.65333138]]
 
transformed version:
[[18.52157747  6.47697214]
 [49.81310011  1.91182038]
 [81.10462276 -2.65333138]]

